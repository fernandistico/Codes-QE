#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: fvera
"""
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import pearsonr
import pandas as pd

# --- 1. Generate Dynamic Ground-Truth Adjacency Matrices ---
def generate_dynamic_adjacency(N, T, tau=20, sigma=0.05):
    """
    Simulates time-varying adjacency matrices using an Ornstein–Uhlenbeck process.
    Args:
        N: Number of nodes.
        T: Number of time steps.
        tau: Decay constant for OU process.
        sigma: Noise strength.
    Returns:
        A: (T, N, N) array of dynamic adjacency matrices.
    """
    A = np.zeros((T, N, N))
    A[0] = np.random.rand(N, N) * 0.1
    for t in range(1, T):
        dA = -(A[t-1] - A[0]) / tau + sigma * np.random.randn(N, N)
        A[t] = A[t-1] + dA
        A[t] = np.clip(A[t], 0, 1)
    return A

# --- 2. Simulate DyGAT Predictions ---
def simulate_prediction(A_true, noise_level=0.1):
    """
    Adds Gaussian noise to simulate DyGAT's prediction.
    Args:
        A_true: Ground-truth dynamic adjacency (T, N, N).
        noise_level: Std of noise.
    Returns:
        A_pred: Simulated predictions.
    """
    return np.clip(A_true + np.random.randn(*A_true.shape) * noise_level, 0, 1)

# --- 3. Compute Edge-wise Pearson Correlation ---
def edge_correlations(A_true, A_pred):
    """
    Computes Pearson correlation for each edge across time.
    Returns:
        mean_r: Mean correlation.
        corrs: List of all correlations.
    """
    T, N, _ = A_true.shape
    corrs = []
    for i in range(N):
        for j in range(N):
            if i != j:
                r, _ = pearsonr(A_true[:, i, j], A_pred[:, i, j])
                corrs.append(r)
    return np.mean(corrs), corrs

# --- 4. Pipeline Execution ---
N, T = 100, 300
A_true = generate_dynamic_adjacency(N, T)
A_pred = simulate_prediction(A_true)
mean_r, all_r = edge_correlations(A_true, A_pred)

# --- 5. Plot Correlation Histogram ---
plt.figure(figsize=(8, 5))
sns.histplot(all_r, kde=True, bins=30, color='royalblue')
plt.axvline(mean_r, color='red', linestyle='--', label=f'Mean ρ = {mean_r:.3f}')
plt.xlabel('Pearson Correlation (ρ)')
plt.ylabel('Edge Count')
plt.title('Edge-wise Correlation Between True and Predicted Dynamics')
plt.legend()
plt.tight_layout()
plt.show()

# Prepare summary
summary_df = pd.DataFrame({
    'Mean Correlation': [mean_r],
    'Std Dev': [np.std(all_r)],
    'Min': [np.min(all_r)],
    'Max': [np.max(all_r)]
})

print(summary_df)
